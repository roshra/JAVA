JAVA

Topics 

Class in Java
------------
	1. Members of class
	2. Dafault Constructor
	3. Java Class Attributes
	4. Static Method and Public Method 

# Members of class

Group of Objects with common property
Blueprint from which Objects are created
Class in Java contains fields 
	Fields  	= Its like a data member/Instance variable 
		  	Its created instide the class but outside the method
		  	Doesnt get memory at compile time
		  	would get memory at run time only
		  	int x = 5;

	Methods 	= Its like a function
	Constructors 	= Defines what happens when object of class is created
			  Default constructor is new class_name()
	Blocks
	Nested Class and interfaces


# Default Constructor
mybox is just a variable at first - > Box mybox
with new Box() , the memory is initialized 

class Box
{

	double width;
	double height;
	double depth;

}

// Class =  Box
// New Object = mybox

Box mybox;
mybox = new Box();
Or 
Box mybox = new Box();

+--------+          +-----------+
|mybox   |          |width= 0.0 |
|        +--------->+           |
|        |          +-----------+
+--------+          |height= 0.0|
                    +-----------+
                    |depth=  0.0|
                    +-----------+


$ Java Class Atributes 
Concept is a class can have multiple attributes like 
age, first name and last name etc


# Static Method and Public Method
Static methods can be accessed by without an object 
Public methids can only be accessed by object
You can split the 


# Class Access modifiers
Public   : The class is accessible by any other class
Default  : The class is only accessible by class in same package

Public 
public class MyClass {
  public static void main(String[] args) {
    System.out.println("Hello World");
  }

Default 
class MyClass {
  public static void main(String[] args) {
    System.out.println("Hello World");
     }
   }
 } 

Class attributes, methods, constructors have folloing modifiers

Public : The code is accessible for all classes 
Private : The code is accessible only within the same class
Default : The code is accessible only in the same package
Protected : The code is accessible in the same package and subclass



Public attribute :
/* Code from filename: Person.java 
public class Person {
  public String fname = "John";
  public String lname = "Doe";
  public String email = "john@doe.com";
  public int age = 24;
}
*/

class MyClass {
  public static void main(String[] args) {
    Person myObj = new Person(); 
    System.out.println("Name: " + myObj.fname + " " + myObj.lname);
    System.out.println("Email: " + myObj.email);
    System.out.println("Age: " + myObj.age);
  }
}


Private attribute:

public class Person {
  private String fname = "John";
  private String lname = "Doe";
  private String email = "john@doe.com";
  private int age = 24;
  
  public static void main(String[] args) {
    Person myObj = new Person();
    System.out.println("Name: " + myObj.fname + " " + myObj.lname);
    System.out.println("Email: " + myObj.email);
    System.out.println("Age: " + myObj.age);
  }
}

Default attribute:

class Person {
  String fname = "John";
  String lname = "Doe";
  String email = "john@doe.com";
  int age = 24;
  
  public static void main(String[] args) {
    Person myObj = new Person();
    System.out.println("Name: " + myObj.fname + " " + myObj.lname);
    System.out.println("Email: " + myObj.email);
    System.out.println("Age: " + myObj.age);
  }
}
Protected :

class Person {
  protected String fname = "John";
  protected String lname = "Doe";
  protected String email = "john@doe.com";
  protected int age = 24;
}

class Student extends Person {
  private int graduationYear = 2018;
  public static void main(String[] args) {
    Student myObj = new Student();
    System.out.println("Name: " + myObj.fname + " " + myObj.lname);
    System.out.println("Email: " + myObj.email);
    System.out.println("Age: " + myObj.age);
    System.out.println("Graduation Year: " + myObj.graduationYear);
  }
}

Final		: 	Attributes and methods cannot be overridden/modified

Static		: 	Attributes and methods belongs to the class, rather than an object

Abstract	: 	Can only be used in an abstract class, and can only be used on methods. The method does not have a body, for example abstract void run();. The body is provided by the subclass (inherited from). You will learn more about inheritance in the Inheritance chapter

Transient 	: Attributes and methods are skipped when serializing the object containing them

Synchronized	: 	Methods can only be accessed by one thread at a time
Volatile	The value of an attribute is not cached thread-locally, and is always read from the "main memory"

Final attribute usage : 
public class MyClass {
  final int x = 10;
  final double PI = 3.14;

  public static void main(String[] args) {
    MyClass myObj = new MyClass();
    myObj.x = 50; // will generate an error: cannot assign a value to a final variable
    myObj.PI = 25; // will generate an error: cannot assign a value to a final variable
    System.out.println(myObj.x); 
  }


# Java Interface 
Its another way to achieve abstraction
An interface is a complete "abstract class"
used to group related methods with empty bodies

// Interfaces

interface Animal {

public void animalSound(); // Interface method does not have a body
public void run()	   // Interface method does not have a body
To access the interface Animal method, interface must be implemented
by another class with implements keyword
Body of interface must be provided by "implement" class

}


Like abstract classes, interfaces cannot be used to create objects (in the example above, it is not possible to create an "Animal" object in the MyMainClass)

Interface methods does not have a body - the body is provided by the "implement" class

On implementation of an interface, you must override all of its methods

Interface methods are by default abstract and public

Interface attributes are by default public, static and final

An interface cannot contain a constructor (as it cannot be used to create objects)

Why And When To Use Interfaces?

To achieve security - hide certain details and only show the important details of an object (interface).

Java does not support "multiple inheritance" (a class can only inherit from one superclass). 

However, it can be achieved with interfaces, because the class can implement multiple interfaces. 

Note: To implement multiple interfaces, separate them with a comma

Its now possible to specify default behaviour for a method in an interface called default method

Here method getValue() is implicitly abstracted 
Its method defined by MyNumber
MyNumber is functional interface
The function interface is defined by getValue() method

Lamdba expression is not defined on its own , but it forms implementation of abstract method defined by functional interface that specify its target type
example : LambdaExpression_MyNumber


interface MyNumber {

	double getValue();

}



# Lamda Expressions 

Two constucts 
	Lambda expression	
	Functional Interface

Lambda expression:
Anonymous method
This method is not executed on its own 
but its used to implement method defined by Functional Interface
Lamda expressions Result in anonymous class
Lamda expressions are refered as closures

Functional Interface:
Its interface that contains only one abstract method
Only one abstract method
abstract(existing in thought or as an idea but not having a physical or concrete existence.)
default method = Posible to specify default behaviour for a method
declare in an interface
Got to Java Interface to learn more
The functional interace represents a single action
Standerd interface Runnable is functional interface because it defines only one method run()
Therefore run() defines action of runnable
Lambda expression can only be in context in which target type is specified 
Functional interface is refered to as of SAM (Single Abstract Method)type 

Lambda expression introduces syntax + new operater called arrow operator -> 
syntax = 
Left Side -> Right Side
parameter -> lambda body
		Lambda body is of two types
			1. single expression
			2. block of code

Left Side specifies any parameters specified by lambda expression, 
If no parameter is needed an empty parameter list is used
Right side is lambda body which specifies action of lambda expression
The -> can be verbalized as "becomes" or "goes to"
 
simplest kind of lambda expression
() -> 123.45
Here left side is parameter , which takes no parameters
and parameter list is empty
It returns constant value 123.45
 .
. . its similar to following method

double myMeth() {return 123.45 } 

Another example of lambda expression
This lambda expression obtain pseudo-random value from Math.random()
multiplies it by 100
return results
() -> Math.random() * 100

When lambda expression require a parameter it is specified in the parameter list
on left side of the lambda operator
This lambda epression returns true if value of parameter n is even
You can specify many parameters

(n) -> (n % 2) == 0

(n) -> (n % 2) == 0 , where n is not specified 
Rather its type is inferred from the parameter type of test() as defined in NumericTest interface, which is int
Its also possible to explicitly specify the type of parameter in lambda expression
This is also a valid way (int n) -> (n%2) == 0
Here n is explicitly specified as int - its not necessary but you can do it at this layer too
The program defines two lambda expressions that are compatible with test() method of functional interface NumericTest
The first lambda expression is isEven and second called lambda expression is isNonNeg
In each case value of parameter n is tested, because each lambda expression is compatible with test() method and executed through 
NumericTest interface
When its only one parameter, its not necessary to place parentheses on left side of lambda expression , which is lambda body
n -> (n%2) == 0
Next program we can check lambda expression with two parameters 

Program which display lambda expression with single parameter 
Promgram : LambdaExpression_withParameters
a
// Interface  
interface NumericTest{
	// Single method without body
	boolean test(int n);
}

public class LambdaExpression_withParameters {

	public static void main(String[] args) {
	
		// Lambda expression
		NumericTest isEven = (n) -> (n%2) == 0;
		isEven.test(10);
		System.out.println("wow its " + isEven.test(10) + "\n");
		if(!isEven.test(9)) System.out.println("9 is not even \n");
		if(isEven.test(10)) System.out.println("10 is even \n");
		
		// Test if number is non-negative
		// Create another reference 
		NumericTest isNonNeg = (n) -> n >= 0;
		if(isNonNeg.test(1)) System.out.println("1 is non-negative");
		if(isNonNeg.test(-1)) System.out.println("-1 is negative");

	}


LambdaExpression_WithTwoParameters
Lambda expression with two parameters

// interface
interface NumaricTest2 {
	boolean test(int n, int d);
}

public class LambdaExpression_WithTwoParameters {

	public static void main(String[] args) {
		// lambda expression
		NumaricTest2 isFactor = (n,d) -> (n%d) == 0;
		
		if(isFactor.test(10, 2)) System.out.println("2 is factor of 10 \n");
		if(!isFactor.test(10, 3)) System.out.println("3 is not a factor is 10 \n");
		

	}

   }
}

# Block Lambda Expression

# Generic functional interface
Earlier program we used two interfaces 
NumericFunc and StringFunc
Both defines method func(), type of parameter and return type was 
int in one case and String is other case.
Instead of having two functional interfaces whose methods differs 
only in their data types, its possible to declare generic interface that can be used to handel both circumstances  

interface SomeFunc<T>{
	T func(T t);
}

public class Lambda_Expression_Generic_Functional_Interface {

	public static void main(String[] args) {
		// Lambda expression string based version
		SomeFunc<String> reverse = (str) -> {
			String result = "";
			for(int i = str.length()-1; i >=0; i--)
				result = result + str.charAt(i);
			return result;
			
		};

		System.out.println("Lambda reverse is " + reverse.func("GEETHIKA"));
		
		// Lambda expression integer based version of SomeFunc
		SomeFunc<Integer> factorial = (n) -> {
			int result = 1;
			for(int i = 1; i <=n; i++)
				result = result * i;
			return result;
		};
		
		System.out.println("Lambda factorial is " + factorial.func(5));
	}

}

Here T specifies both the 
1. return type
2. parameter type of func()
that means its compatible with any lambda expression that takes one parameter 
and returns a value of same type

SomeFunc is used to provide a reference to tow different types of lambdas 
The first use type is String 
The second use type Integer 
Thus the same functional interface can be used to refer to the reverse lambda
Only the type argument passed to SomeFunc differs 

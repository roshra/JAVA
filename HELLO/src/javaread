JAVA

Topics 

Class in Java
------------
	1. Members of class
	2. Dafault Constructor
	3. Java Class Attributes
	4. Static Method and Public Method 

# Members of class

Group of Objects with common property
Blueprint from which Objects are created
Class in Java contains fields 
	Fields  	= Its like a data member/Instance variable 
		  	Its created instide the class but outside the method
		  	Doesnt get memory at compile time
		  	would get memory at run time only
		  	int x = 5;

	Methods 	= Its like a function
	Constructors 	= Defines what happens when object of class is created
			  Default constructor is new class_name()
	Blocks
	Nested Class and interfaces


# Default Constructor
mybox is just a variable at first - > Box mybox
with new Box() , the memory is initialized 

class Box
{

	double width;
	double height;
	double depth;

}

// Class =  Box
// New Object = mybox

Box mybox;
mybox = new Box();
Or 
Box mybox = new Box();

+--------+          +-----------+
|mybox   |          |width= 0.0 |
|        +--------->+           |
|        |          +-----------+
+--------+          |height= 0.0|
                    +-----------+
                    |depth=  0.0|
                    +-----------+


$ Java Class Atributes 
Concept is a class can have multiple attributes like 
age, first name and last name etc


# Static Method and Public Method
Static methods can be accessed by without an object 
Public methids can only be accessed by object
You can split the 


# Class Access modifiers
Public   : The class is accessible by any other class
Default  : The class is only accessible by class in same package

Public 
public class MyClass {
  public static void main(String[] args) {
    System.out.println("Hello World");
  }

Default 
class MyClass {
  public static void main(String[] args) {
    System.out.println("Hello World");
     }
   }
 } 

Class attributes, methods, constructors have folloing modifiers

Public : The code is accessible for all classes 
Private : The code is accessible only within the same class
Default : The code is accessible only in the same package
Protected : The code is accessible in the same package and subclass



Public attribute :
/* Code from filename: Person.java 
public class Person {
  public String fname = "John";
  public String lname = "Doe";
  public String email = "john@doe.com";
  public int age = 24;
}
*/

class MyClass {
  public static void main(String[] args) {
    Person myObj = new Person(); 
    System.out.println("Name: " + myObj.fname + " " + myObj.lname);
    System.out.println("Email: " + myObj.email);
    System.out.println("Age: " + myObj.age);
  }
}


Private attribute:

public class Person {
  private String fname = "John";
  private String lname = "Doe";
  private String email = "john@doe.com";
  private int age = 24;
  
  public static void main(String[] args) {
    Person myObj = new Person();
    System.out.println("Name: " + myObj.fname + " " + myObj.lname);
    System.out.println("Email: " + myObj.email);
    System.out.println("Age: " + myObj.age);
  }
}

Default attribute:

class Person {
  String fname = "John";
  String lname = "Doe";
  String email = "john@doe.com";
  int age = 24;
  
  public static void main(String[] args) {
    Person myObj = new Person();
    System.out.println("Name: " + myObj.fname + " " + myObj.lname);
    System.out.println("Email: " + myObj.email);
    System.out.println("Age: " + myObj.age);
  }
}
Protected :

class Person {
  protected String fname = "John";
  protected String lname = "Doe";
  protected String email = "john@doe.com";
  protected int age = 24;
}

class Student extends Person {
  private int graduationYear = 2018;
  public static void main(String[] args) {
    Student myObj = new Student();
    System.out.println("Name: " + myObj.fname + " " + myObj.lname);
    System.out.println("Email: " + myObj.email);
    System.out.println("Age: " + myObj.age);
    System.out.println("Graduation Year: " + myObj.graduationYear);
  }
}

Final		: 	Attributes and methods cannot be overridden/modified

Static		: 	Attributes and methods belongs to the class, rather than an object

Abstract	: 	Can only be used in an abstract class, and can only be used on methods. The method does not have a body, for example abstract void run();. The body is provided by the subclass (inherited from). You will learn more about inheritance in the Inheritance chapter

Transient 	: Attributes and methods are skipped when serializing the object containing them

Synchronized	: 	Methods can only be accessed by one thread at a time
Volatile	The value of an attribute is not cached thread-locally, and is always read from the "main memory"

Final attribute usage : 
public class MyClass {
  final int x = 10;
  final double PI = 3.14;

  public static void main(String[] args) {
    MyClass myObj = new MyClass();
    myObj.x = 50; // will generate an error: cannot assign a value to a final variable
    myObj.PI = 25; // will generate an error: cannot assign a value to a final variable
    System.out.println(myObj.x); 
  }

# Lamda Expressions 

Two constucts 
	Lambda expression	
	Functional Interface

Lambda expression:
Anonymous method
This method is not executed on its own 
but its used to implement method defined by Functional Interface
Lamda expressions Result in anonymous class
Lamda expressions are refered as closures

Functional Interface:
Its interface that contains only one abstract method
The functional interace represents a single action
Standerd interface Runnable is functional interface because it defines only one method run()
Therefore run() defines action of runnable
Lambda expression can only be in context in which target type is specified 
Functional interface is refered to as of SAM (Single Abstract Method)type 

Lambda expression introduces syntax + new operater called arrow operator -> 
syntax = 
Left Side -> Right Side
parameter -> lambda body

Left Side specifies any parameters specified by lambda expression, If no parameter is needed an empty parameter list is used
Right side is lambda body 

